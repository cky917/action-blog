(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{248:function(t,s,a){"use strict";a.r(s);var e=a(4),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[a("a",{attrs:{href:"https://zh.javascript.info/regular-expressions",target:"_blank",rel:"noopener noreferrer"}},[t._v("教程地址"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"模式和修饰符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模式和修饰符"}},[t._v("#")]),t._v(" 模式和修饰符")]),t._v(" "),a("h3",{attrs:{id:"模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模式"}},[t._v("#")]),t._v(" 模式")]),t._v(" "),a("p",[t._v("即pattern，匹配reg")]),t._v(" "),a("h3",{attrs:{id:"修饰符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修饰符"}},[t._v("#")]),t._v(" 修饰符")]),t._v(" "),a("ul",[a("li",[t._v("i 忽略大小写")]),t._v(" "),a("li",[t._v("g 全部匹配")]),t._v(" "),a("li",[t._v("m 多行模式")]),t._v(" "),a("li",[t._v("u 开启完整的 unicode 支持")]),t._v(" "),a("li",[t._v("y 粘滞模式")])]),t._v(" "),a("h2",{attrs:{id:"regexp-和-string-的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#regexp-和-string-的方法"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://zh.javascript.info/regexp-methods#shi-yonggxiu-shi-fu-de-strmatchreg",target:"_blank",rel:"noopener noreferrer"}},[t._v("RegExp 和 String 的方法"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"str-search-regexp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#str-search-regexp"}},[t._v("#")]),t._v(" str.search(regexp)")]),t._v(" "),a("p",[a("code",[t._v("str.search(regexp)")]),t._v(" 方法返回的是找到的匹配项的索引位置，如果没找到则返回 -1。重要提示："),a("strong",[t._v("search 总是查找第一个匹配项")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"str-match-reg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#str-match-reg"}},[t._v("#")]),t._v(" str.match(reg)")]),t._v(" "),a("ul",[a("li",[t._v("没有'g'修饰符情况下的"),a("code",[t._v("str.match(reg)")]),t._v(" "),a("code",[t._v("str.match(reg)")]),t._v(" 只会查找第一个匹配项。\n结果是一个数组，里面有该匹配项和额外的属性：\n"),a("ul",[a("li",[a("code",[t._v("index")]),t._v(" – 匹配项在字符串中所处在的位置，")]),t._v(" "),a("li",[a("code",[t._v("input")]),t._v("– 原始字符串。")])])]),t._v(" "),a("li",[t._v("使用“g”修饰符的 "),a("code",[t._v("str.match(reg)")]),t._v("\n当使用 "),a("code",[t._v('"g"')]),t._v(" 修饰符的时候，"),a("code",[t._v("str.match")]),t._v(" 就会返回由所有匹配项组成的数组。在数组中没有额外的属性，而且圆括号也不会创建任何元素。重要提示："),a("strong",[t._v("如果没有匹配项，将返回"),a("code",[t._v("null")])]),t._v("。")])]),t._v(" "),a("h3",{attrs:{id:"str-split-regexp-substr-limit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#str-split-regexp-substr-limit"}},[t._v("#")]),t._v(" str.split(regexp|substr, limit)")]),t._v(" "),a("p",[t._v("使用 regexp（或子字符串）作为分隔符分隔字符串。")]),t._v(" "),a("h3",{attrs:{id:"str-replace-str-reg-str-func"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#str-replace-str-reg-str-func"}},[t._v("#")]),t._v(" str.replace(str|reg, str|func)")]),t._v(" "),a("p",[t._v("搜索和替换字符串的利器。")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'12-34-56'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('":"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 12:34-56")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'12-34-56'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/-/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('":"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 12:34:56")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("第二个参数是要替换的字符串，可以使用特殊符号")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"John Doe, John Smith and John Bull."')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对于每个 John — 替换成 Mr.John")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/John/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Mr.$&'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "Mr.John Doe, Mr.John Smith and Mr.John Bull.";')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"John Smith"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/(John) (Smith)/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'$2, $1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Smith, John")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("对于那些需要“智能”替换的场景，第二个参数可以是函数。\n函数参数：func(str, p1, p2, ..., pn, offset, s)")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("str")]),t._v(" — 匹配项，")]),t._v(" "),a("li",[a("code",[t._v("p1, p2, ..., pn")]),t._v(" — 圆括号里的内容（如果有的话），")]),t._v(" "),a("li",[a("code",[t._v("offset")]),t._v(" — 匹配项所在的位置，")]),t._v(" "),a("li",[a("code",[t._v("s")]),t._v(" — 源字符串。")])]),t._v(" "),a("h3",{attrs:{id:"regexp-test-str"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#regexp-test-str"}},[t._v("#")]),t._v(" regexp.test(str)")]),t._v(" "),a("p",[a("code",[t._v("test")]),t._v("方法查找任何符合的匹配，无论是否找到，都会返回 true/false。")]),t._v(" "),a("h3",{attrs:{id:"regexp-exec-str"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#regexp-exec-str"}},[t._v("#")]),t._v(" regexp.exec(str)")]),t._v(" "),a("ul",[a("li",[t._v("如果不使用 "),a("code",[t._v("g")]),t._v(" 修饰符，则与 "),a("code",[t._v("str.match")]),t._v(" 没有什么区别。")]),t._v(" "),a("li",[t._v("如果有 "),a("code",[t._v("g")]),t._v("，那么"),a("code",[t._v("regexp.exec(str)")]),t._v(" 返回第一个匹配项，然后在 "),a("code",[t._v("regexp.lastIndex")]),t._v(" 里 记住 该匹配项结束的的位置。下一次调用从 "),a("code",[t._v("regexp.lastIndex")]),t._v(" 开始搜索，并且返回下一个匹配项。如果再没有匹配项了，则 "),a("code",[t._v("regexp.exec")]),t._v(" 返回 "),a("code",[t._v("null")]),t._v("，"),a("code",[t._v("regexp.lastIndex")]),t._v("置为 0。")])]),t._v(" "),a("h3",{attrs:{id:"y修饰符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#y修饰符"}},[t._v("#")]),t._v(" y修饰符")]),t._v(" "),a("p",[a("code",[t._v("y")]),t._v(" 修饰符意味着搜索应该并且只能在属性 "),a("code",[t._v("regexp.lastIndex")]),t._v("指定的位置查找匹配项。")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"I love JavaScript!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/javascript/iy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nreg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0（默认）")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// null, 没有在位置 0 上找到匹配项")]),t._v("\nreg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// JavaScript（搜索正确，该单词确实在位置 7）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对于其它 reg.lastIndex，结果都为 null")]),t._v("\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[a("code",[t._v("y")]),t._v(" 修饰符非常适合解析器 — 一种需要“读取”文本、构建内存语法结构或者从中执行操作的程序。为此，我们沿着文本移动，应用正则表达式，来看下一个是字符串、数字还是其它。")]),t._v(" "),a("p",[a("code",[t._v("y")]),t._v(" 修饰符在给定位置应用一个正则表达式（或者会有很多，逐个进行），当我们理解了其中的内容后，就可以继续一步步检查文本。")]),t._v(" "),a("p",[t._v("在没有该修饰符的情况下，引擎总是会检查到文本的末尾，这需要花费时间，尤其是当文本很大的时候，解析器将会很慢。"),a("code",[t._v("y")]),t._v(" 修饰符在这里使用则恰到好处。")]),t._v(" "),a("h2",{attrs:{id:"字符集合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符集合"}},[t._v("#")]),t._v(" 字符集合")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("\\d — 数字。")])]),t._v(" "),a("li",[a("p",[t._v("\\D — 非数字。")])]),t._v(" "),a("li",[a("p",[t._v("\\s — 空格标识，制表符，换行符。")])]),t._v(" "),a("li",[a("p",[t._v("\\S — 除了 \\s 的所有。")])]),t._v(" "),a("li",[a("p",[t._v("\\w — 英文单词，数字，下划线 '_'。")])]),t._v(" "),a("li",[a("p",[t._v("\\W — 除了 \\w 的所有。")])]),t._v(" "),a("li",[a("p",[t._v("'.' — 除了一个换行符的任何字符。")])])]),t._v(" "),a("h2",{attrs:{id:"转义，特殊字符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#转义，特殊字符"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://zh.javascript.info/regexp-escaping",target:"_blank",rel:"noopener noreferrer"}},[t._v("转义，特殊字符"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("特殊字符列表： "),a("code",[t._v("[ \\ ^ $ . | ? * + ( )")])]),t._v(" "),a("h2",{attrs:{id:"集合和范围"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集合和范围"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://zh.javascript.info/regexp-character-sets-and-ranges",target:"_blank",rel:"noopener noreferrer"}},[t._v("集合和范围[...]"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("在方括号 "),a("code",[t._v("[…]")]),t._v("中的几个字符或者字符类意味着“搜索给定的字符中的任意一个”。")]),t._v(" "),a("h3",{attrs:{id:"集合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集合"}},[t._v("#")]),t._v(" 集合")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Mop top"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/[tm]op/gi")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "Mop", "top"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Voila"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/V[oi]la/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// null，并没有匹配上")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("h3",{attrs:{id:"范围"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#范围"}},[t._v("#")]),t._v(" 范围")]),t._v(" "),a("p",[t._v("方括号也可以包含字符范围。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("\\d —— 表示的意思和 [0-9] 一样，")])]),t._v(" "),a("li",[a("p",[t._v("\\w —— 表示的意思和 [a-zA-Z0-9_] 一样，")])]),t._v(" "),a("li",[a("p",[t._v("\\s —— 表示的意思和 [\\t\\n\\v\\f\\r ] 加上其它一些 unicode 编码的空格一样。")])])]),t._v(" "),a("p",[t._v("我们也可以在 […] 内部使用字符类。")]),t._v(" "),a("p",[t._v("比如说，我们想要匹配所有单词字符或者短划线，类似像 “twenty-third” 之类的单词。我们不能使用 \\w+ 来匹配，因为 \\w 并不包含一个短划线。但是我们可以使用 [\\w-] 来查找。")]),t._v(" "),a("p",[t._v('我们也可以使用字符类的组合来覆盖每个可能的字符，比如说像 [\\s\\S]。这会匹配任何空格或者非空格的字符 —— 也就是任何字符。这个匹配范围会比符号点 "." 的范围更广，因为点匹配只能匹配除了换行符之外的所有字符。')]),t._v(" "),a("h3",{attrs:{id:"排除范围-…"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#排除范围-…"}},[t._v("#")]),t._v(" 排除范围[^…]")]),t._v(" "),a("p",[t._v("它们通过在匹配查询的开头添加插入符号 ^ 来表示，它会匹配所有除了给定的字符之外的任意字符。")]),t._v(" "),a("h3",{attrs:{id:"在-中不转义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在-中不转义"}},[t._v("#")]),t._v(" 在[...]中不转义")]),t._v(" "),a("p",[t._v("在方括号表示中，绝大多数特殊字符可以在不转义的情况下使用")]),t._v(" "),a("h2",{attrs:{id:"unicode-标记"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unicode-标记"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://zh.javascript.info/regexp-unicode",target:"_blank",rel:"noopener noreferrer"}},[t._v("unicode 标记"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("unicide 标记"),a("code",[t._v("/.../u")]),t._v(" 可以正确支持 UTF16 编码代理对。")]),t._v(" "),a("h2",{attrs:{id:"量词-和-n"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#量词-和-n"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://zh.javascript.info/regexp-quantifiers",target:"_blank",rel:"noopener noreferrer"}},[t._v("量词 "),a("code",[t._v("+,*,?")]),t._v(" 和 "),a("code",[t._v("{n}")]),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("假设我们有一个字符串 +7(903)-123-45-67，并且想要找到它包含的所有数字。但与之前不同的是，我们对单个数字不感兴趣，只对全数感兴趣：7, 903, 123, 45, 67。")]),t._v(" "),a("p",[t._v("数字是一个或多个 \\d 的序列。用来形容我们所需要的数量的词被称为量词。")]),t._v(" "),a("h3",{attrs:{id:"数量-n"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数量-n"}},[t._v("#")]),t._v(" 数量 {n}")]),t._v(" "),a("ul",[a("li",[t._v("确切的位数：{5}")])]),t._v(" "),a("p",[a("code",[t._v("\\d{5}")]),t._v(" 表示 5 位的数字，如同"),a("code",[t._v("\\d\\d\\d\\d\\d")]),t._v("。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("某个范围的位数：{3,5} 来查找位数为 3 至 5 位的数字：\\d{3,5}")])]),t._v(" "),a("li",[a("p",[t._v("\\d{n,} 就会查找位数大于或等于n 的数字：")]),t._v(" "),a("p",[t._v("对于字符串 +7(903)-123-45-67 来说，我们如果需要一个或多个连续的数字，就使用 \\d{1,}")])])]),t._v(" "),a("h3",{attrs:{id:"缩写"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缩写"}},[t._v("#")]),t._v(" 缩写")]),t._v(" "),a("p",[t._v("大多数常用的量词都可以有缩写：")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("+")]),t._v(" 代表一个或多个 相当于{1,}")]),t._v(" "),a("p",[t._v("例如，\\d+ 用来查找所有数字")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("?")]),t._v("  代表“零个或一个”，相当于 {0,1}。换句话说，它使得符号变得可选")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("*")]),t._v(" 代表“零个或多个”，相当于{0,}。也就是说这个字符可以出现多次或不出现")])])]),t._v(" "),a("h2",{attrs:{id:"贪婪量词和惰性量词"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#贪婪量词和惰性量词"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://zh.javascript.info/regexp-greedy-and-lazy",target:"_blank",rel:"noopener noreferrer"}},[t._v("贪婪量词和惰性量词"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"贪婪搜索"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#贪婪搜索"}},[t._v("#")]),t._v(" 贪婪搜索")]),t._v(" "),a("p",[t._v("默认情况下，正则表达式引擎会尝试尽可能多地重复量词。例如，"),a("code",[t._v("\\d+")]),t._v(" 检测所有可能的字符。当不可能检测更多（没有更多的字符或到达字符串末尾）时，然后它再匹配模式的剩余部分。如果没有匹配，则减少重复的次数（回溯），并再次尝试。")]),t._v(" "),a("h3",{attrs:{id:"懒惰模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#懒惰模式"}},[t._v("#")]),t._v(" 懒惰模式")]),t._v(" "),a("p",[t._v("通过在量词后添加问号 ? 来启用。在每次重复量词之前，引擎会尝试去匹配模式的剩余部分。")]),t._v(" "),a("h2",{attrs:{id:"捕获组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#捕获组"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://zh.javascript.info/regexp-groups",target:"_blank",rel:"noopener noreferrer"}},[t._v("捕获组"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("正则模式的一部分可以用括号括起来 "),a("code",[t._v("(...)")]),t._v("，由此构成一个『捕获组』。")]),t._v(" "),a("p",[t._v("这有两个作用：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("当使用 "),a("code",[t._v("String#match")]),t._v(" 或 "),a("code",[t._v("RegExp#exec")]),t._v(" 方法时，它允许你把匹配到的部分放到一个独立的数组项里面。")])]),t._v(" "),a("li",[a("p",[t._v("如果我们在括号之后加上量词，那么它会应用到这个整体，而非最后一个字符。")])])]),t._v(" "),a("h2",{attrs:{id:"反向引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反向引用"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://zh.javascript.info/regexp-backreferences",target:"_blank",rel:"noopener noreferrer"}},[t._v("反向引用"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("捕获组不仅能在结果中读取，也能在替换字符串，甚至模式中读取。")]),t._v(" "),a("h3",{attrs:{id:"替换字符串中的组：-n"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#替换字符串中的组：-n"}},[t._v("#")]),t._v(" 替换字符串中的组：$n")]),t._v(" "),a("p",[a("code",[t._v("replace")]),t._v(" 方法中可以用 $n 在替换字符串中访问第 n 个捕获组。")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"John Smith"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nname "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/(\\w+) (\\w+)/i")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$2, $1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Smith, John")]),t._v("\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("h3",{attrs:{id:"模式中的组-n"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模式中的组-n"}},[t._v("#")]),t._v(" 模式中的组: \\n")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"He said: \\"She\'s the one!\\"."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/(['\"])(.*?)\\1/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "She\'s the one!"')]),t._v("\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("正则表达式引擎匹配第一个引号 (['\"]) 时，记录 pattern(...) 的内容，这就是第一个捕获组。")]),t._v(" "),a("p",[t._v("\\1 的含义是“找到与第一组相同的文本”(存的是结果，不是条件)。")]),t._v(" "),a("p",[t._v("请注意：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("在替换字符串内部引用组的方式 —— $1，在模式中引用组的方式 —— \\1。")])]),t._v(" "),a("li",[a("p",[t._v("在组内使用 ?: 则无法引用到该组。正则表达式引擎不会记住被排除在捕获 (?:...) 之外的组。")])])]),t._v(" "),a("h2",{attrs:{id:"选择-or"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#选择-or"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://zh.javascript.info/regexp-alternation",target:"_blank",rel:"noopener noreferrer"}},[t._v("选择(OR) |"),a("OutboundLink")],1)]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/html|php|css|java(script)?/gi")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"First HTML appeared, then CSS, then JavaScript"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'HTML', 'CSS', 'JavaScript'")]),t._v("\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("我们通常用圆括号把模式中的选择部分括起来，像这样 "),a("code",[t._v("before(XXX|YYY)after")]),t._v("。")]),t._v(" "),a("p",[t._v("匹配时间：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/([01]\\d|2[0-3]):[0-5]\\d/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"00:00 +8 10:10 23:59 25:99 1:2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 00:00 +8,10:10,23:59")]),t._v("\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("h2",{attrs:{id:"字符串的开始符-和结束符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串的开始符-和结束符"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://zh.javascript.info/regexp-anchors",target:"_blank",rel:"noopener noreferrer"}},[t._v("字符串的开始符 ^ 和结束符 $"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("脱字符 "),a("code",[t._v("^")]),t._v(" 匹配文本的开始，而美元符 "),a("code",[t._v("$")]),t._v(" 匹配文本的结束。")]),t._v(" "),a("h2",{attrs:{id:"flag-m-—-多行模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flag-m-—-多行模式"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://zh.javascript.info/regexp-multiline-mode",target:"_blank",rel:"noopener noreferrer"}},[t._v('Flag "m" — 多行模式'),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("通过 flag "),a("code",[t._v("/.../m")]),t._v(" 可以开启多行模式。")]),t._v(" "),a("p",[t._v("这仅仅会影响 ^ 和 $ 锚符的行为。")]),t._v(" "),a("p",[t._v("在多行模式下，它们不仅仅匹配文本的开始与结束，还匹配每一行的开始与结束。")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("1st place: Winnie\n2nd place: Piglet\n33rd place: Eeyore")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/^\\d+/gm")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1, 2, 33")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\w+$/gim")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Winnie,Piglet,Eeyore")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("h2",{attrs:{id:"无限回溯问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#无限回溯问题"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://zh.javascript.info/regexp-infinite-backtracking-problem",target:"_blank",rel:"noopener noreferrer"}},[t._v("无限回溯问题"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("有些正则表达式看起来简单，但会执行很长很长的时间，甚至会“挂起” JavaScript 引擎。\n典型的情况 —— 一个正则表达式有时候工作正常，但对于特定的字符串它会“挂起”占用 100% 的 CPU。")]),t._v(" "),a("p",[t._v("见文章")])])}),[],!1,null,null,null);s.default=r.exports}}]);